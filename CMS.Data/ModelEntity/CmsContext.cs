// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace CMS.Data.ModelEntity
{
    public partial class CmsContext : DbContext
    {
        public CmsContext()
        {
        }

        public CmsContext(DbContextOptions<CmsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Advertising> Advertising { get; set; }
        public virtual DbSet<AdvertisingBlock> AdvertisingBlock { get; set; }
        public virtual DbSet<AdvertisingBlockDetail> AdvertisingBlockDetail { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserProfiles> AspNetUserProfiles { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ReplaceChar> ReplaceChar { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Advertising>(entity =>
            {
                entity.Property(e => e.IsCode).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.AdvertisingBlock)
                    .WithMany(p => p.Advertising)
                    .HasForeignKey(d => d.AdvertisingBlockId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Advertising_AdvertisingBlock");
            });

            modelBuilder.Entity<AdvertisingBlock>(entity =>
            {
                entity.Property(e => e.IsMobile).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.ConcurrencyStamp).IsUnicode(false);

                entity.Property(e => e.NormalizedName).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_dbo.AspNetUserLogins");

                entity.Property(e => e.ProviderDisplayName).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserProfiles>(entity =>
            {
                entity.Property(e => e.Gender).HasComment("true là nam, false là nữ");

                entity.Property(e => e.RegType).HasComment("1 là email, 2 là sdt");
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.ConcurrencyStamp).IsUnicode(false);

                entity.Property(e => e.IsEnabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.NormalizedEmail).IsUnicode(false);

                entity.Property(e => e.NormalizedUserName).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}